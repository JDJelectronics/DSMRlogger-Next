/*
***************************************************************************  
**  Program  : oledStuff.h, part of DSMRlogger-Next
**  Version  : v2.3.0-rc5
**
**  Copyright (c) 2020 Willem Aandewiel
**
**  TERMS OF USE: MIT License. See bottom of file.                                                            
***************************************************************************      
*/
#include <U8g2lib.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif


U8G2_SSD1306_128X64_NONAME_F_HW_I2C oled(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

// void oled_Print_Msg(uint8_t, const char* , uint16_t);

static bool     buttonState = LOW;
static uint8_t  msgMode = 0;
static bool     boolDisplay = true; 
static uint8_t  settingOledType = 1;  // 0=none, 1=SSD1306, 2=SH1106
static uint16_t settingOledSleep; 
static uint8_t  settingOledFlip;  

uint8_t     lineHeight, charHeight;

DECLARE_TIMER_MIN(oledSleepTimer, 10);  // sleep the display in 10 minutes

//===========================================================================================
void checkFlashButton() 
{
  //if (settingOledSleep == 0) return;  // if the display timer is turned off, then don't check flashbutton
    
  //check if the displaytimer is due... 
  if ( (settingOledSleep > 0) && boolDisplay && DUE(oledSleepTimer) ) 
  {
    DebugTln("Switching display off..");
    oled.clear();
    boolDisplay = false;
  }

  //check the button and turn it on.
  if (digitalRead(FLASH_BUTTON) == LOW && buttonState == LOW) 
  {
    DebugTln(F("Pressed the FlashButton!"));
    buttonState = HIGH;
  } 
  else if (digitalRead(FLASH_BUTTON) == HIGH && buttonState == HIGH) 
  {
    buttonState = LOW;
    boolDisplay = !boolDisplay;
    if (boolDisplay) {
      DebugTln(F("Switching display on.."));    
    }
    else
    {
      DebugTln(F("Switching display off.."));
    }
    oled.clear();
    msgMode = 0; //reset the display loop
    RESTART_TIMER(oledSleepTimer);
  }   
  
} // checkFlashButton()


//===========================================================================================



void oled_Init() 
{
  oled.begin();
  oled.clearBuffer();
  oled.setFontMode(1);
  oled.setFont(u8g2_font_haxrcorp4089_tr); 
  DebugTf("OLED is [%3dx%3d], charHeight[%d], lineHeight[%d], nrLines[%d]\r\n", oled.getWidth(), oled.getHeight(), oled.getMaxCharWidth(), oled.getMaxCharHeight(), oled.getDisplayHeight()/oled.getMaxCharHeight() );
  oled.sendBuffer();
  oled.clearBuffer();

  boolDisplay = true;
  //if (settingOledFlip)  oled.displayRemap(true);
  RESTART_TIMER(oledSleepTimer);
    
}   // oled_Init()

//===========================================================================================

void oled_Clear() 
{
    oled.clear(); 
}   // oled_Clear


//===========================================================================================
// DECLARE_TIMER_MS(timer, 0);
// void oled_Print_Msg(uint8_t line, const char* message, uint16_t wait) 
// {
//   if (!boolDisplay) return;  
  
//   char buf[20]{0};  

//   oled.setFontMode(0);
//   oled.setFont(u8g2_font_haxrcorp4089_tr); 
//   strlcpy(buf, message, sizeof(buf)); 
//   strlcat(buf, "                    ", sizeof(buf)); 

//   oled.setCursor(0, line * oled.getMaxCharHeight());
//   oled.print(buf); 
//   oled.sendBuffer();

//   if (wait>0)
//   {
//     CHANGE_INTERVAL_MS(timer, wait);
//     RESTART_TIMER(timer);
//     while (!DUE(timer))
//     {
//       delay(1);
//     }
//   }

// }   // oled_Print_Msg()


const unsigned char trex[] U8X8_PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0xe0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xfe,
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xfe, 0x03, 0x00, 0x00, 0x00,
0x00, 0x00, 0xe0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x03, 0x00, 0x00, 0x00,
0x00, 0x00, 0xe0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xf0, 0x03,
0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00,
0x80, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x80, 0x83, 0xff, 0x1f,
0x00, 0x00, 0x00, 0x00, 0x80, 0xc7, 0xff, 0x13, 0x00, 0x00, 0x00, 0x00,
0x80, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x03,
0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xf1, 0x3f, 0xfe,
0xff, 0xff, 0xff, 0x0f, 0x00, 0xc0, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xc0, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc3, 0x20, 0x08,
0x00, 0x0f, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x03,
0x3c, 0x40, 0x20, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x00,
0x00, 0x00, 0x00, 0x00 };



//60 by 35 pixels
const unsigned char trex_cactus[] U8X8_PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0x80, 0x0f, 0x00,
0x00, 0x00, 0xe0, 0xff, 0x03, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x60, 0xfe,
0x03, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x60, 0xfe, 0x03, 0x80, 0x0f, 0x00,
0x00, 0x00, 0xe0, 0xff, 0x03, 0x98, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0xff,
0x03, 0x9c, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x03, 0x9c, 0xcf, 0x00,
0x00, 0x00, 0xe0, 0xff, 0x03, 0x9c, 0xcf, 0x01, 0x00, 0x00, 0xe0, 0x0f,
0x00, 0x9c, 0xcf, 0x01, 0x00, 0x00, 0xe0, 0xff, 0x00, 0x9c, 0xcf, 0x01,
0x00, 0x00, 0xe0, 0x03, 0x00, 0x9c, 0xcf, 0x01, 0x80, 0x00, 0xf0, 0x03,
0x00, 0x9c, 0xcf, 0x01, 0x80, 0x00, 0xfc, 0x03, 0x00, 0x9c, 0xff, 0x00,
0x80, 0x00, 0xff, 0x1f, 0x00, 0x9c, 0x7f, 0x00, 0x80, 0x83, 0xff, 0x1f,
0x00, 0x9c, 0x0f, 0x00, 0x80, 0xc7, 0xff, 0x13, 0x00, 0x98, 0x0f, 0x00,
0x80, 0xff, 0xff, 0x03, 0x00, 0xf8, 0x0f, 0x00, 0x80, 0xff, 0xff, 0x03,
0x00, 0xf0, 0x0f, 0x00, 0x80, 0xff, 0xff, 0x03, 0x00, 0x80, 0x0f, 0x00,
0x00, 0xff, 0xff, 0x01, 0x00, 0x80, 0x0f, 0x00, 0x00, 0xfe, 0xff, 0x01,
0x00, 0x80, 0x0f, 0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x80, 0x0f, 0x00,
0x00, 0xf8, 0x7f, 0x00, 0x00, 0x80, 0x0f, 0x00, 0xfc, 0xf1, 0x3f, 0xfe,
0xff, 0x9f, 0xcf, 0x0f, 0x00, 0xc0, 0x37, 0x00, 0x00, 0x80, 0x0f, 0x00,
0x00, 0xc0, 0x33, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x80, 0xc3, 0x20, 0x08,
0x00, 0x8f, 0x0f, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x03,
0x3c, 0x40, 0x20, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x00,
0x00, 0x00, 0x00, 0x00 };


//60 by 35 pixels
const unsigned char trex_scared[] U8X8_PROGMEM = {
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00,
0x00, 0x80, 0x0f, 0x00, 0xc0, 0x01, 0x80, 0xff, 0x01, 0x80, 0x0f, 0x00,
0xe0, 0x03, 0xe0, 0xff, 0x03, 0x80, 0x0f, 0x00, 0xe0, 0x03, 0x60, 0xfc,
0x03, 0x80, 0x0f, 0x00, 0xe2, 0x03, 0x60, 0xfd, 0x03, 0x80, 0x0f, 0x00,
0xc0, 0x01, 0x60, 0xfc, 0x03, 0x98, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0xff,
0x03, 0x9c, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x03, 0x9c, 0xcf, 0x00,
0x00, 0x00, 0xe0, 0xff, 0x03, 0x9c, 0xcf, 0x01, 0x00, 0x00, 0xe0, 0x7f,
0x00, 0x9c, 0xcf, 0x01, 0x00, 0x00, 0xe0, 0xff, 0x00, 0x9c, 0xcf, 0x01,
0x00, 0x00, 0xe0, 0x03, 0x00, 0x9c, 0xcf, 0x01, 0x80, 0x00, 0xf0, 0x03,
0x00, 0x9c, 0xcf, 0x01, 0x80, 0x00, 0xfc, 0x03, 0x00, 0x9c, 0xff, 0x00,
0x80, 0x00, 0xff, 0x1f, 0x00, 0x9c, 0x7f, 0x00, 0x80, 0x83, 0xff, 0x1f,
0x00, 0x9c, 0x0f, 0x00, 0x80, 0xc7, 0xff, 0x13, 0x00, 0x98, 0x0f, 0x00,
0x80, 0xff, 0xff, 0x03, 0x00, 0xf8, 0x0f, 0x00, 0x80, 0xff, 0xff, 0x03,
0x00, 0xf0, 0x0f, 0x00, 0x80, 0xff, 0xff, 0x03, 0x00, 0x80, 0x0f, 0x00,
0x00, 0xff, 0xff, 0x01, 0x00, 0x80, 0x0f, 0x00, 0x00, 0xfe, 0xff, 0x01,
0x00, 0x80, 0x0f, 0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x80, 0x0f, 0x00,
0x00, 0xf8, 0x7f, 0x00, 0x00, 0x80, 0x0f, 0x00, 0xfc, 0xf1, 0x3f, 0xfe,
0xff, 0x9f, 0xcf, 0x0f, 0x00, 0xc0, 0x37, 0x00, 0x00, 0x80, 0x0f, 0x00,
0x00, 0xc0, 0x33, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x80, 0xc3, 0x20, 0x08,
0x00, 0x8f, 0x0f, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x03,
0x3c, 0x40, 0x20, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x00,
0x00, 0x00, 0x00, 0x00 };

//60 by 35 pixels
const unsigned char trex_gameover[] U8X8_PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xf8, 0x10, 0x22, 0x0f, 0x1c, 0x91, 0xe7, 0x01, 0x08, 0x28, 0x36, 0x01,
0x22, 0x91, 0x20, 0x02, 0x0c, 0x44, 0x2a, 0x01, 0x22, 0x91, 0x20, 0x02,
0xc4, 0x44, 0x22, 0x03, 0x22, 0x91, 0xe1, 0x01, 0x8c, 0x7c, 0x22, 0x01,
0x22, 0x9b, 0x20, 0x03, 0x98, 0x44, 0x22, 0x01, 0x22, 0x8e, 0x20, 0x02,
0xf0, 0x44, 0x22, 0x0f, 0x1c, 0x84, 0x27, 0x02, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x07, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x18, 0x04, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0x38, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x78, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x80, 0x38, 0x04, 0x00,
0x00, 0x80, 0x07, 0x00, 0x80, 0x18, 0x04, 0x00, 0x00, 0xa0, 0x27, 0x00,
0x80, 0x08, 0x04, 0x00, 0x00, 0xe0, 0x27, 0x00, 0x80, 0x00, 0x04, 0x00,
0x00, 0x80, 0x27, 0x00, 0x80, 0xff, 0x07, 0x00, 0x00, 0x80, 0x3f, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0xfc, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x60, 0x00, 0x00, 0x80, 0x07, 0x00,
0x00, 0x00, 0x20, 0x36, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x98, 0x0f,
0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x38, 0x2b, 0x00, 0x00, 0x00, 0x03,
0x3c, 0x00, 0x88, 0x2f, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0f,
0x00, 0x00, 0x00, 0x00 };
   

//---JDJ chip logo--- 64 by 64 pixels
const unsigned char JDJ_Chip[] U8X8_PROGMEM = {
0xff, 0xff, 0xe3, 0xe3, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3,
0xc7, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xc7, 0xc7, 0xff, 0xff,
0xff, 0xff, 0xe3, 0xe3, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3,
0xc7, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xc7, 0xc7, 0xff, 0xff,
0xff, 0xff, 0xe3, 0xe3, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00,
0x00, 0x00, 0xfe, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff,
0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x07, 0x00, 0x00,
0x00, 0x00, 0xe0, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x01, 0x00, 0x00,
0x00, 0x00, 0xc7, 0xff, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x83, 0x01,
0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 0x83, 0x01, 0x80, 0x01, 0x00, 0x00,
0x00, 0x80, 0x83, 0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x80, 0x83, 0xff,
0xff, 0x01, 0x00, 0x00, 0x00, 0x80, 0x81, 0xff, 0xff, 0x01, 0x00, 0x00,
0x00, 0x80, 0x80, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x01, 0x00, 0x00,
0x00, 0x00, 0x80, 0xff, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,
0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0xc0, 0xf8,
0x07, 0x18, 0x80, 0x01, 0xff, 0x01, 0xc0, 0xfc, 0x07, 0x18, 0x80, 0xff,
0xff, 0x01, 0xc0, 0x0c, 0x06, 0x18, 0x80, 0xff, 0xff, 0x01, 0x60, 0x0c,
0x06, 0x0c, 0x80, 0xff, 0xff, 0x01, 0x60, 0x06, 0x03, 0x0c, 0x80, 0xff,
0xff, 0x01, 0x60, 0x06, 0x03, 0x0c, 0x80, 0xff, 0xff, 0x01, 0x30, 0x86,
0x03, 0x06, 0x80, 0xff, 0x80, 0xc1, 0x3f, 0xff, 0xfd, 0x07, 0x80, 0x01,
0x80, 0xe1, 0x1f, 0xff, 0xfd, 0x03, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00,
0x00, 0x00, 0x80, 0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x01, 0x07, 0x00,
0x00, 0x00, 0x80, 0xff, 0xff, 0x01, 0x03, 0x00, 0x00, 0x00, 0x80, 0xff,
0xff, 0x81, 0x01, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x81, 0x03, 0x00,
0x00, 0x00, 0x80, 0xff, 0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x80, 0x01,
0x80, 0x81, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00,
0x00, 0x00, 0x80, 0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff,
0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0x00, 0x00,
0x00, 0x00, 0xe0, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff,
0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x1f, 0x00, 0x00,
0x00, 0x00, 0xf8, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff,
0xff, 0xff, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xe3, 0xe3, 0xc7, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3,
0xc7, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xc7, 0x8f, 0xff, 0xff,
0xff, 0xff, 0xe3, 0xe3, 0xc7, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3,
0xc7, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xc7, 0x8f, 0xff, 0xff,
0xff, 0xff, 0xe3, 0xe3, 0xc7, 0x8f, 0xff, 0xff };


//---Telegram logo--- 100 by 67 pixels
const unsigned char Telegram_Logo[] U8X8_PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x40, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xee, 0x1f, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xef, 0xff, 0x7e, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xfd, 0xdf, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xfd,
0xfb, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xdf,
0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
0xff, 0x7f, 0xef, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xff, 0x7f, 0xfb, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0xff, 0xfd, 0xef, 0xbd, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x7b, 0x3b, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xe3, 0x3f, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x77, 0xe0, 0x7f, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x1f, 0xf0, 0x7b, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x07, 0xe0, 0x7f,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x00, 0xf0,
0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x5f, 0x00,
0xb0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07,
0x30, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff,
0x01, 0x18, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
0x7f, 0x00, 0x0e, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xf0, 0x0f, 0x00, 0x07, 0xf0, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xf0, 0x0f, 0xc0, 0x03, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xf8, 0x1f, 0xe0, 0x01, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xf0, 0x7f, 0xf8, 0x00, 0xf8, 0xff, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x00, 0xf8, 0xff, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x3f, 0x00, 0xf8, 0x7f, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x00, 0xf8, 0x7f,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x01, 0xfc,
0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x03,
0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff,
0x07, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
0xff, 0x1f, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
0xff, 0xff, 0x7f, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xc0, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x7f, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x7f,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff,
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

//---Telegram Icon--- 35 by 35 pixels
const unsigned char Telegram_icon[] U8X8_PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x00, 0xf0, 0x06, 0x00,
0x00, 0x00, 0x7c, 0x07, 0x00, 0x00, 0x00, 0x9f, 0x07, 0x00, 0x00, 0xe0,
0xcf, 0x07, 0x00, 0x00, 0xfc, 0xe3, 0x03, 0x00, 0x00, 0xff, 0xf1, 0x07,
0x00, 0xc0, 0x7f, 0xfc, 0x03, 0x00, 0x00, 0x3f, 0xfc, 0x03, 0x00, 0x00,
0x08, 0xff, 0x03, 0x00, 0x00, 0x90, 0xff, 0x01, 0x00, 0x00, 0x90, 0xff,
0x01, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00,
0x00, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x40, 0xe0, 0x00, 0x00, 0x00, 0x00,
0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

//=============================================================================
//---Bluethoot icon--- 13 by 13 pixels
const unsigned char BT[] U8X8_PROGMEM = {
0x30, 0x00, 0x50, 0x00, 0x90, 0x00, 0x11, 0x01, 0x92, 0x00, 0x54, 0x00,
0x38, 0x00, 0x54, 0x00, 0x92, 0x00, 0x11, 0x01, 0x90, 0x00, 0x50, 0x00,
0x30, 0x00 };

//---bluethoot connect icon--- 12 by 12 pixels
const unsigned char BTc[] U8X8_PROGMEM = {
0x30, 0x00, 0x50, 0x00, 0x90, 0x00, 0x11, 0x01, 0x92, 0x00, 0x54, 0x00,
0x39, 0x01, 0x54, 0x00, 0x92, 0x00, 0x11, 0x01, 0x90, 0x00, 0x50, 0x00,
0x30, 0x00 };

//=============================================================================

//--WIFI icons---  13 by 12 pixels
const unsigned char wifi_no_acces_to_internet[] U8X8_PROGMEM = {
0xf0, 0x01, 0x0c, 0x06, 0x06, 0x0c, 0x03, 0x18, 0x01, 0x12, 0x03, 0x1a,
0x06, 0x0a, 0x0c, 0x02, 0x18, 0x02, 0xb0, 0x02, 0xe0, 0x00, 0x40, 0x02 };
   
const unsigned char wifi_0[] U8X8_PROGMEM = {
0xf0, 0x01, 0x0c, 0x06, 0x06, 0x0c, 0x03, 0x18, 0x01, 0x10, 0x03, 0x18,
0x06, 0x0c, 0x0c, 0x06, 0x18, 0x03, 0xb0, 0x01, 0xe0, 0x00, 0x40, 0x00 };

const unsigned char wifi_20[] U8X8_PROGMEM = {
0xf0, 0x01, 0x0c, 0x06, 0x06, 0x0c, 0x03, 0x18, 0x01, 0x10, 0x03, 0x18,
0x06, 0x0c, 0x0c, 0x06, 0xf8, 0x03, 0xf0, 0x01, 0xe0, 0x00, 0x40, 0x00 };

const unsigned char wifi_50[] U8X8_PROGMEM = {
0xf0, 0x01, 0x0c, 0x06, 0x06, 0x0c, 0x03, 0x18, 0xff, 0x1f, 0xff, 0x1f,
0xfe, 0x0f, 0xfc, 0x07, 0xf8, 0x03, 0xf0, 0x01, 0xe0, 0x00, 0x40, 0x00 };

const unsigned char wifi_80[] U8X8_PROGMEM = {
0xf0, 0x01, 0x0c, 0x06, 0xfe, 0x0f, 0xff, 0x1f, 0xff, 0x1f, 0xff, 0x1f,
0xfe, 0x0f, 0xfc, 0x07, 0xf8, 0x03, 0xf0, 0x01, 0xe0, 0x00, 0x40, 0x00 };

const unsigned char wifi_100[] U8X8_PROGMEM = {
0xf0, 0x01, 0xfc, 0x07, 0xfe, 0x0f, 0xff, 0x1f, 0xff, 0x1f, 0xff, 0x1f,
0xfe, 0x0f, 0xfc, 0x07, 0xf8, 0x03, 0xf0, 0x01, 0xe0, 0x00, 0x40, 0x00 };


//=============================================================================


void drawHeader(){
  oled.drawHLine(0, 15, 128); 
  oled.setFont(u8g2_font_haxrcorp4089_tr);
  oled.drawStr( 0, 10,"DSMR-NEXT");
}

void printStr(const  int line, const char *msg){
  oled.setCursor(0, 25 + line * oled.getMaxCharHeight());
  oled.print(msg);
}

void drawAPmode(const char * msg)
{  
  printStr(0, "AP MODE");      
  printStr(1, "Connect to:"); 
  printStr(2, msg);
} //drawAPmode()

void drawNoWifi()
{  
   printStr(0,"Timout AP mode");
   printStr(1, "No wifi connection");
   printStr(2, "Timeout, failed to connect");       
} //drawNoWifi()

void drawAPconnected()
{
   printStr(0, "CONNECTED"); 
   printStr(1, WiFi.SSID().c_str());
   printStr(2, WiFi.localIP().toString().c_str());
}//drawAPconnected()

void drawTelegramPost()
{
   oled.drawXBMP(40, 0,  100, 67, Telegram_Logo);
   oled.setFont(u8g2_font_haxrcorp4089_tr);
   printStr(0, "POSTING...");
}//drawTelegramPost()

void drawTelnetConnected()
{
 printStr(0, "Telnet (poort 23) for debug");
}//drawTelnetConnected()


void drawLittleFSmounted()
{

  DebugTln(F("LittleFS Mount succesfull\r"));
  printStr(0,  "LittleFS mounted");
  delay(2000);  
}//drawLittleFSmounted()

void drawLittleFSmountfailed()
{
  DebugTln(F("LittleFS Mount failed\r"));   // Serious problem with LittleFS 
  printStr(0,  "LittleFS mount failed");
  delay(2000);
}//drawLittleFSmountfailed()

void drawLittleFSPopulated()
{
  printStr(0,  "LittleFS populated");
  printStr(1,  "with data");
  printStr(2,  "from DSMR");
  delay(2000);
}//drawLittleFSPopulated()

void drawLittleFSNotPopulated()
{
  printStr(0,  "LittleFS FAILED!");
  printStr(1,  "Not all files found");
  printStr(2,  "for DSMR (fout!)");
  printStr(3,  "Start FSexplorer");
  delay(2000);
}//drawLittleFSNotPopulated()

void drawDSMRFileExist(const char * msg)
{
  printStr(0, "Does file exist?");
  printStr(1,  msg);
  delay(250);
}//drawDSMRFileExist()

void drawDateTime(const char *msg)
{
  printStr(0,  msg);
}//drawDateTime()

void drawMQTTConnected()
{
  printStr(0, "MQTT Connected");
}//drawMQTTConnected()

void drawHTTPServerStarted()
{
  printStr(0, "HTTP Server started");  
  printStr(1, "Check poort 80");
}//drawHTTPServerStarted()

void drawWaitForTelegram()
{
  printStr(0, "Waiting for telegram");
  printStr(1, "for first telegram");
}//drawWaitForTelegram()

void drawMdnsStarted()
{
  printStr(0, "mDNS started");
}//drawMdnsStarted()

void drawDisplayMsg(const char * msg)
{
  printStr(1, msg);
}//drawDisplayMsg()


void drawProcessTelegram(const char* msg){
  char buf[40]{0};
  printStr(0, msg);
  snprintf(buf, sizeof(buf), "-Power%7d Watt", (int)(DSMRdata.power_delivered *1000));
  printStr(1, buf);
  snprintf(buf, sizeof(buf), "+Power%7d Watt", (int)(DSMRdata.power_returned *1000));
  printStr(2, buf);
}

void drawFirmware()
{  
  char buf[40]{0};
  oled.clearBuffer(); 
  oled.drawXBMP(0, 0,  64, 64, JDJ_Chip);
  oled.setFont(u8g2_font_haxrcorp4089_tr);
  oled.drawStr( 70, 15,"Model: NEXT");
  strlcpy(buf, "FW: ", sizeof(buf));
  strlcat(buf, _SEMVER_CORE, sizeof(buf));
  oled.drawStr( 70, 35, buf); 
  strlcpy(buf, " D: ", sizeof(buf));
  strlcat(buf, _VERSION_DATE, sizeof(buf));
  oled.drawStr( 70, 45, buf); 
  oled.drawStr( 70, 55,"Robert van den Breemen"); 
  oled.sendBuffer(); 
} //drawFirmware()



//=============================================================================


void drawOffline()
{  
   oled.clearBuffer();
   oled.drawXBMP(115, 0,  13, 12, wifi_no_acces_to_internet);
   oled.drawHLine(0, 15, 128);
   oled.setFont(u8g2_font_haxrcorp4089_tr);
   oled.drawStr( 0, 10,"I'm offline"); 
   oled.drawXBMP(30, 25,  60, 35, trex);  
   oled.sendBuffer();
   delay(1000); 
   oled.clearBuffer();
   oled.drawXBMP(115, 0,  13, 12, wifi_no_acces_to_internet);
   oled.drawHLine(0, 15, 128);
   oled.setFont(u8g2_font_haxrcorp4089_tr);
   oled.drawStr( 0, 10,"Connect me to"); 
   oled.drawXBMP(30, 25,  60, 35, trex_cactus);   
   oled.sendBuffer();
   delay(1000); 
   oled.clearBuffer();
   oled.drawXBMP(115, 0,  13, 12, wifi_no_acces_to_internet);
   oled.drawHLine(0, 15, 128);
   oled.setFont(u8g2_font_haxrcorp4089_tr);
   oled.drawStr( 0, 10,"the internet !"); 
   oled.drawXBMP(30, 25,  60, 35, trex_scared);   
   oled.sendBuffer();
   oled.clearBuffer();
   delay(1000); 
 
      
} //drawOffline()

//=============================================================================
void drawTelegram_Logo()
{
   oled.clearBuffer();
   oled.drawXBMP(40, 0,  100, 67, Telegram_Logo);
   oled.setFont(u8g2_font_haxrcorp4089_tr);
   oled.drawStr( 15, 35,"POSTING..");
   oled.sendBuffer();
   oled.clearBuffer();
   delay(1000);
    
}//drawConnected()
//=============================================================================

enum oled_screen_t {oled_APmode, oled_APconnected, oled_no_wifi, oled_telegram_post, oled_telnet_connected, \
                    oled_littlefs_mounted, oled_littlefs_mount_failed, oled_littlefs_populated, oled_littlefs_not_populated, oled_DSMR_fileExist, \
                    oled_date_time, oled_mqtt_connected, oled_http_server_started, oled_wait_for_telegram, \
                    oled_mdns_started, oled_display_msg, oled_process_telegram};


void drawScreen(oled_screen_t screen, const char * msg = NULL){
  //setup the screenbuffer
  oled.clearBuffer();
  //draw header line
  drawHeader();
  //draw connectivity
  if (WiFi.status() == WL_CONNECTED) { 
    oled.drawXBMP(115, 0,  13, 12, wifi_80);
    //oled.drawXBMP(100, 0,  13, 13, BTc);   
  } else {
    oled.drawXBMP(115, 0,  13, 12, wifi_no_acces_to_internet);
  }
  //draw rest of screen
  switch (screen){
    case oled_APmode:
      drawAPmode(msg);
      break;
    case oled_APconnected:
      drawAPconnected();
      break;
    case oled_no_wifi:
      drawNoWifi();
      break;
    case oled_telegram_post:
      drawTelegramPost();
      break;
    case oled_telnet_connected:
      drawTelnetConnected();
      break;
    case oled_littlefs_mounted:
      drawLittleFSmounted();
      break;    
    case oled_littlefs_mount_failed:
      drawLittleFSmountfailed();
      break;
    case oled_littlefs_populated:
      drawLittleFSPopulated();
      break;
    case oled_littlefs_not_populated:
      drawLittleFSNotPopulated();
      break;
    case oled_DSMR_fileExist: 
      drawDSMRFileExist(msg);
      break;
    case oled_date_time:
      drawDateTime(msg);
      break;
    case oled_mqtt_connected:
      drawMQTTConnected();
      break;
    case oled_http_server_started:
      drawHTTPServerStarted();
      break;
    case oled_wait_for_telegram:
      drawWaitForTelegram();
      break;
    case oled_mdns_started:
      drawMdnsStarted();
      break;
    case oled_display_msg:
      drawDisplayMsg(msg);
      break;
    case oled_process_telegram:
      drawProcessTelegram(msg);
      break;
  }
  //ship it to screen
  oled.sendBuffer(); 
}


/***************************************************************************
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the
* "Software"), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to permit
* persons to whom the Software is furnished to do so, subject to the
* following conditions:
*
* The above copyright notice and this permission notice shall be included
* in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
* OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
* THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* 
***************************************************************************/
